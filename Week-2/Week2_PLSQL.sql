CREATE TABLE CUST (
    CUST_ID NUMBER PRIMARY KEY,
    CUST_NAME VARCHAR2(100),
    CUST_DOB DATE,
    CUST_BAL NUMBER,
    CUST_LAST_MOD DATE
);

CREATE TABLE ACC (
    ACC_ID NUMBER PRIMARY KEY,
    CUST_ID NUMBER,
    ACC_TYPE VARCHAR2(20),
    ACC_BAL NUMBER,
    ACC_LAST_MOD DATE,
    FOREIGN KEY (CUST_ID) REFERENCES CUST (CUST_ID)
);

CREATE TABLE TRANS (
    TRANS_ID NUMBER PRIMARY KEY,
    ACC_ID NUMBER,
    TRANS_DATE DATE,
    TRANS_AMT NUMBER,
    TRANS_TYPE VARCHAR2(10),
    FOREIGN KEY (ACC_ID) REFERENCES ACC (ACC_ID)
);

CREATE TABLE LOAN (
    LOAN_ID NUMBER PRIMARY KEY,
    CUST_ID NUMBER,
    LOAN_AMT NUMBER,
    LOAN_INT_RATE NUMBER,
    LOAN_START_DATE DATE,
    LOAN_END_DATE DATE,
    FOREIGN KEY (CUST_ID) REFERENCES CUST (CUST_ID)
);

CREATE TABLE EMP (
    EMP_ID NUMBER PRIMARY KEY,
    EMP_NAME VARCHAR2(100),
    EMP_POS VARCHAR2(50),
    EMP_SAL NUMBER,
    EMP_DEPT VARCHAR2(50),
    EMP_HIRE_DATE DATE
);

-- INSERT INTO CUST
INSERT INTO CUST (CUST_ID, CUST_NAME, CUST_DOB, CUST_BAL, CUST_LAST_MOD)
VALUES (1, 'John Doe', TO_DATE('1985-05-15', 'YYYY-MM-DD'), 1000, SYSDATE);
INSERT INTO CUST (CUST_ID, CUST_NAME, CUST_DOB, CUST_BAL, CUST_LAST_MOD)
VALUES (2, 'Jane Smith', TO_DATE('1990-07-20', 'YYYY-MM-DD'), 1500, SYSDATE);

-- INSERT INTO ACC
INSERT INTO ACC (ACC_ID, CUST_ID, ACC_TYPE, ACC_BAL, ACC_LAST_MOD)
VALUES (1, 1, 'Savings', 1000, SYSDATE);
INSERT INTO ACC (ACC_ID, CUST_ID, ACC_TYPE, ACC_BAL, ACC_LAST_MOD)
VALUES (2, 2, 'Checking', 1500, SYSDATE);

-- INSERT INTO TRANS
INSERT INTO TRANS (TRANS_ID, ACC_ID, TRANS_DATE, TRANS_AMT, TRANS_TYPE)
VALUES (1, 1, SYSDATE, 200, 'Deposit');
INSERT INTO TRANS (TRANS_ID, ACC_ID, TRANS_DATE, TRANS_AMT, TRANS_TYPE)
VALUES (2, 2, SYSDATE, 300, 'Withdrawal');

-- INSERT INTO LOAN
INSERT INTO LOAN (LOAN_ID, CUST_ID, LOAN_AMT, LOAN_INT_RATE, LOAN_START_DATE, LOAN_END_DATE)
VALUES (1, 1, 5000, 5, SYSDATE, ADD_MONTHS(SYSDATE, 60));

-- INSERT INTO EMP
INSERT INTO EMP (EMP_ID, EMP_NAME, EMP_POS, EMP_SAL, EMP_DEPT, EMP_HIRE_DATE)
VALUES (1, 'Alice Johnson', 'Manager', 70000, 'HR', TO_DATE('2015-06-15', 'YYYY-MM-DD'));
INSERT INTO EMP (EMP_ID, EMP_NAME, EMP_POS, EMP_SAL, EMP_DEPT, EMP_HIRE_DATE)
VALUES (2, 'Bob Brown', 'Developer', 60000, 'IT', TO_DATE('2017-03-20', 'YYYY-MM-DD'));

-- SCENARIO 1
SELECT * FROM CUST;
SELECT * FROM LOAN;

SET SERVEROUTPUT ON;
DECLARE
    CURSOR CUST_CURSOR IS
    SELECT CUST_ID, EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM CUST_DOB) AS AGE
    FROM CUST;
    CUST_ID_VAR CUST.CUST_ID%TYPE;
    AGE_VAR NUMBER;
BEGIN
    FOR CUST_REC IN CUST_CURSOR LOOP
        CUST_ID_VAR := CUST_REC.CUST_ID;
        AGE_VAR := CUST_REC.AGE;
        IF AGE_VAR > 60 THEN
            UPDATE LOAN
            SET LOAN_INT_RATE = LOAN_INT_RATE - 1
            WHERE CUST_ID = CUST_ID_VAR;
        ELSE
            DBMS_OUTPUT.PUT_LINE('CUSTOMER WITH ID: ' || CUST_ID_VAR || ' IS OF AGE: ' || AGE_VAR);
            DBMS_OUTPUT.PUT_LINE('NO CHANGE IN LOAN');
        END IF;
    END LOOP;
    COMMIT;
END;
/

SELECT * FROM LOAN;

-- SCENARIO 2
DESC CUST;
ALTER TABLE CUST ADD CUST_VIP CHAR(10) CONSTRAINT CHK1 CHECK(CUST_VIP IN ('TRUE','FALSE'));

SELECT * FROM CUST;
SET SERVEROUTPUT ON;
DECLARE
    CURSOR CUST_CURSOR IS
    SELECT CUST_ID, CUST_BAL
    FROM CUST;
    CUST_ID_VAR CUST.CUST_ID%TYPE;
    CUST_BAL_VAR CUST.CUST_BAL%TYPE;
BEGIN
    FOR CUST_REC IN CUST_CURSOR LOOP
        CUST_ID_VAR := CUST_REC.CUST_ID;
        CUST_BAL_VAR := CUST_REC.CUST_BAL;
        IF CUST_BAL_VAR > 10000 THEN
            DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || CUST_ID_VAR || ' HAS BALANCE GREATER THAN 10000');
            UPDATE CUST
            SET CUST_VIP = 'TRUE'
            WHERE CUST_ID = CUST_ID_VAR;
        ELSE
            DBMS_OUTPUT.PUT_LINE('CUSTOMER ID: ' || CUST_ID_VAR || ' HAS BALANCE LESS THAN 10000');
            UPDATE CUST
            SET CUST_VIP = 'FALSE'
            WHERE CUST_ID = CUST_ID_VAR;
        END IF;
    END LOOP;
    COMMIT;
END;
/
SELECT * FROM CUST;

-- SCENARIO 3
SET SERVEROUTPUT ON;
DECLARE
    CURSOR LOAN_CUR IS
    SELECT L.LOAN_ID, L.CUST_ID, C.CUST_NAME, L.LOAN_END_DATE
    FROM LOAN L
    JOIN CUST C ON L.CUST_ID = C.CUST_ID
    WHERE L.LOAN_END_DATE BETWEEN SYSDATE AND SYSDATE + 30;
    LOAN_ID_VAR LOAN.LOAN_ID%TYPE;
    CUST_ID_VAR LOAN.CUST_ID%TYPE;
    CUST_NAME_VAR CUST.CUST_NAME%TYPE;
    LOAN_END_DATE_VAR LOAN.LOAN_END_DATE%TYPE;
    FOUND_VAR BOOLEAN := FALSE;
BEGIN
    OPEN LOAN_CUR;
    LOOP
        FETCH LOAN_CUR INTO LOAN_ID_VAR, CUST_ID_VAR, CUST_NAME_VAR, LOAN_END_DATE_VAR;
        EXIT WHEN LOAN_CUR%NOTFOUND;
        FOUND_VAR := TRUE;
        DBMS_OUTPUT.PUT_LINE('Reminder: Loan ' || LOAN_ID_VAR || ' for customer ' || CUST_NAME_VAR || ' (ID: ' || CUST_ID_VAR || ') is due on ' || TO_CHAR(LOAN_END_DATE_VAR, 'YYYY-MM-DD'));
    END LOOP;
    CLOSE LOAN_CUR;

    IF NOT FOUND_VAR THEN
        DBMS_OUTPUT.PUT_LINE('No loans are due within the next 30 days.');
    END IF;
END;
/

-- SCENARIO 1
SELECT * FROM ACC;
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PROCESS_MONTHLY_INT AS
BEGIN
    UPDATE ACC
    SET ACC_BAL = ACC_BAL * 1.01,
        ACC_LAST_MOD = SYSDATE
    WHERE ACC_TYPE = 'Savings';
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Monthly interest processed for all savings accounts.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error processing monthly interest: ' || SQLERRM);
END PROCESS_MONTHLY_INT;
/

EXEC PROCESS_MONTHLY_INT();

SELECT * FROM ACC;

-- SCENARIO 2
SELECT * FROM EMP;

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE UPDATE_EMP_BONUS(
    DEPT_VAR IN EMP.EMP_DEPT%TYPE,
    BONUS_PERCENT_VAR IN NUMBER
) AS
BEGIN
    UPDATE EMP
    SET EMP_SAL = EMP_SAL * (1 + BONUS_PERCENT_VAR / 100),
        EMP_HIRE_DATE = SYSDATE
    WHERE EMP_DEPT = DEPT_VAR;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Bonus applied to employees in the ' || DEPT_VAR || ' department.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error updating employee bonuses: ' || SQLERRM);
END UPDATE_EMP_BONUS;
/

EXEC UPDATE_EMP_BONUS('IT', 5);
EXEC UPDATE_EMP_BONUS('HR', 3);

SELECT * FROM EMP;

-- SCENARIO 3
SELECT * FROM ACC;
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE TRANSFER_FUNDS(
    FROM_ACC_ID_VAR IN ACC.ACC_ID%TYPE,
    TO_ACC_ID_VAR IN ACC.ACC_ID%TYPE,
    AMT_VAR IN NUMBER
) AS
    FROM_BAL_VAR ACC.ACC_BAL%TYPE;
BEGIN
    SELECT ACC_BAL INTO FROM_BAL_VAR
    FROM ACC
    WHERE ACC_ID = FROM_ACC_ID_VAR
    FOR UPDATE;
    -- Check for sufficient funds
    IF FROM_BAL_VAR < AMT_VAR THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in the source account.');
    END IF;
    -- Perform the transfer
    UPDATE ACC
    SET ACC_BAL = ACC_BAL - AMT_VAR,
        ACC_LAST_MOD = SYSDATE
    WHERE ACC_ID = FROM_ACC_ID_VAR;
    UPDATE ACC
    SET ACC_BAL = ACC_BAL + AMT_VAR,
        ACC_LAST_MOD = SYSDATE
    WHERE ACC_ID = TO_ACC_ID_VAR;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Transfer of ' || AMT_VAR || ' from account ' || FROM_ACC_ID_VAR || ' to account ' || TO_ACC_ID_VAR || ' completed successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Transfer failed: ' || SQLERRM);
END TRANSFER_FUNDS;
/

EXEC TRANSFER_FUNDS(1, 2, 100);

SELECT * FROM ACC;
